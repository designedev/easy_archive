{
  "_args": [
    [
      {
        "raw": "h5.linkformat@0.0.0",
        "scope": null,
        "escapedName": "h5.linkformat",
        "name": "h5.linkformat",
        "rawSpec": "0.0.0",
        "spec": "0.0.0",
        "type": "version"
      },
      "/volume2/homes/designedev/develop/archive/node_modules/archive.is"
    ]
  ],
  "_from": "h5.linkformat@0.0.0",
  "_id": "h5.linkformat@0.0.0",
  "_inCache": true,
  "_location": "/h5.linkformat",
  "_npmUser": {
    "name": "morkai",
    "email": "lukasz@walukiewicz.eu"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "h5.linkformat@0.0.0",
    "scope": null,
    "escapedName": "h5.linkformat",
    "name": "h5.linkformat",
    "rawSpec": "0.0.0",
    "spec": "0.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/archive.is"
  ],
  "_resolved": "https://registry.npmjs.org/h5.linkformat/-/h5.linkformat-0.0.0.tgz",
  "_shasum": "07cc465b2dafd2154f4e85fc06d2544e1478ebf6",
  "_shrinkwrap": null,
  "_spec": "h5.linkformat@0.0.0",
  "_where": "/volume2/homes/designedev/develop/archive/node_modules/archive.is",
  "author": {
    "name": "Łukasz Walukiewicz",
    "email": "lukasz@walukiewicz.eu",
    "url": "http://lukasz.walukiewicz.eu/"
  },
  "bugs": {
    "url": "https://github.com/morkai/h5.linkformat/issues"
  },
  "dependencies": {},
  "description": "Implementation of Constrained RESTful Environments (CoRE) Link Format for node.js and the browser.",
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-env": "~0.4.1",
    "grunt-istanbul": "~0.2.4",
    "grunt-simple-mocha": "~0.4.0",
    "requirejs": "~2.1.9",
    "should": "~2.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "07cc465b2dafd2154f4e85fc06d2544e1478ebf6",
    "tarball": "https://registry.npmjs.org/h5.linkformat/-/h5.linkformat-0.0.0.tgz"
  },
  "engine": [
    "node >=0.10"
  ],
  "homepage": "https://github.com/morkai/h5.linkformat",
  "keywords": [
    "h5",
    "core",
    "rest",
    "link",
    "link-format",
    "web-linking",
    "rfc",
    "rfc6690",
    "rfc5988",
    "coap"
  ],
  "license": "MIT",
  "main": "./lib/index",
  "maintainers": [
    {
      "name": "morkai",
      "email": "lukasz@walukiewicz.eu"
    }
  ],
  "name": "h5.linkformat",
  "optionalDependencies": {},
  "readme": "# h5.linkformat\r\n\r\n[![Build Status](https://travis-ci.org/morkai/h5.linkformat.png?branch=master)](https://travis-ci.org/morkai/h5.linkformat)\r\n\r\nPartial implementation of the\r\n[RFC-6690](http://tools.ietf.org/html/rfc6690) *(Constrained RESTful Environments (CoRE) Link Format)*\r\nand [draft-bormann-core-links-json-01](http://tools.ietf.org/html/draft-bormann-core-links-json-01)\r\n*(Representing CoRE Link Collections in JSON)* for node.js and the browser.\r\n\r\nWhy partial? Because the following features are not supported\r\n(see [Link Format](http://tools.ietf.org/html/rfc6690#section-2) section of the RFC):\r\n  - validation of the parameter values (e.g. `foobar` will be accepted as a value\r\n    for the `sz` parameter).\r\n  - `ext-name-star` in `link-extension` (see [RFC-2231](http://tools.ietf.org/html/rfc2231)).\r\n\r\n## Usage\r\n\r\n```js\r\nvar linkFormat = require('h5.linkformat');\r\n\r\nvar input = [\r\n  '</sensors>;ct=40;title=\"Sensor Index\",',\r\n  '</sensors/temp>;rt=\"temperature-c\";if=\"sensor\",',\r\n  '</sensors/light>;rt=\"light-lux\";if=\"sensor\",',\r\n  '<http://www.example.com/sensors/t123>'\r\n    + ';anchor=\"/sensors/temp\"'\r\n    + ';rel=\"describedby\",',\r\n  '</t>;anchor=\"/sensors/temp\";rel=\"alternate\"'\r\n].join('');\r\n\r\nvar expected = [\r\n  '</sensors/temp>;rt=\"temperature-c\",if=\"sensor\"',\r\n  '</sensors/light>;rt=\"light-lux\",if=\"sensor\"'\r\n].join(',');\r\n\r\nconsole.log(linkFormat.parse(input).filter({if: 'sensor'}).toString());\r\n```\r\n\r\nSee the [example/ directory](example/).\r\n\r\n## API\r\n\r\n### parse\r\n\r\n`Array.<object> parse(string input[, object options])`\r\n\r\nAccepts:\r\n\r\n  - `input` - a required string in the CoRE Link Format to parse.\r\n\r\n  - `options` - an optional options object. Valid options include:\r\n\r\n    - `allowMultiple` - whether multiple values for params should be allowed. Defaults to `true`.\r\n\r\n    - `coerce` - whether to coerce unquoted param values to JavaScript types. Defaults to `false`.\r\n\r\n    - `quotedValueConverter` - a `mixed function(string quotedValue)` used to convert quoted param\r\n      string values to JavaScript types. Defaults to a function that replaces all occurrences\r\n      of `\\t` with `\\\\t`, `\\r\\n` with ` ` and then parses the resulting value as a JSON string\r\n      (using `JSON.parse()`).\r\n\r\nResults in an array of link objects. Each object will at least have a `href` property.\r\n\r\nThrows if the specified (or the default) `quotedValueConverter` does.\r\n\r\n### filter\r\n\r\n`Array.<object> filter(Array.<object> links, string paramName, mixed paramValue)`\r\n`Array.<object> filter(Array.<object> links, object criteria)`\r\n\r\nAccepts:\r\n\r\n  - `links` - an array of link objects to filter.\r\n\r\n  - `paramName` - a param name to match.\r\n\r\n  - `paramValue` - a param value to match.\r\n\r\n    If the param value is equal to `*`, then any value is accepted (only checks whether\r\n    the specified param exists). Also, a wildcard string matching can be performed by prefixing\r\n    and/or suffixing the param value with `*`.\r\n\r\n  - `criteria` - a map of param names to param values to match. Specifying `paramName`\r\n    and `paramValue` is the same as:\r\n\r\n    ```js\r\n    var criteria = {};\r\n    criteria[paramName] = paramValue;\r\n    ```\r\n\r\nReturns an array of link objects that satisfy the specified criteria.\r\n\r\n### toString\r\n\r\n`string toString(Array.<object> links)`\r\n\r\nAccepts:\r\n\r\n  - `links` - an array of link objects to serialize to a string.\r\n\r\nReturns a string representation of the specified link objects.\r\n\r\n### Method chaining\r\n\r\nThe `index` module exports a special, wrapped version of the `parse` module.\r\n\r\nThe `toString()` and `filter()` methods of the returned links array are replaced with the functions\r\nfrom the `toString` and `filter` modules. Also, the `toString()` method of the filtered links array\r\nis replaced with the function from the `toString` module.\r\n\r\nSo instead of:\r\n```js\r\nvar parse = require('h5.linkformat/lib/parse');\r\nvar filter = require('h5.linkformat/lib/filter');\r\nvar toString = require('h5.linkformat/lib/toString');\r\n\r\nconsole.log(toString(filter(parse(input), 'if', 'sensor')));\r\n```\r\n\r\none can write it like so:\r\n```js\r\nvar linkFormat = require('h5.linkformat');\r\n\r\nconsole.log(linkFormat.parse(input).filter('if', 'sensor').toString());\r\n```\r\n\r\nPassing a function to the `filter()` method for more complex filtering still works.\r\n\r\n## Browser build (AMD)\r\n\r\nTo generate an AMD version of the library run the following command:\r\n\r\n```\r\nnpm run-script amd\r\n```\r\n\r\nThe result should be available in the `build/lib-amd/` directory.\r\n\r\n## Tests\r\n\r\nTo run the tests, clone the repository:\r\n\r\n```\r\ngit clone git://github.com/morkai/h5.linkformat.git\r\n```\r\n\r\nMake sure [Grunt](http://gruntjs.com/) is installed globally:\r\n(if not, then check out the Grunt's\r\n[Getting Started guide](https://github.com/gruntjs/grunt/wiki/Getting-started)).\r\n\r\n```\r\ngrunt -V\r\n```\r\n\r\nInstall the development dependencies:\r\n\r\n```\r\ncd h5.linkformat/\r\nnpm install\r\n```\r\n\r\nAnd execute the `grunt test` command.\r\n\r\nTo generate the code coverage report, execute the `grunt coverage` command.\r\nA detailed code coverage report will be generated in the `build/coverage/`\r\ndirectory and can be viewed in the browser by opening the\r\n`build/coverage/lcov-report/index.html` file.\r\n\r\n## License\r\n\r\nThis project is released under the\r\n[MIT License](https://raw.github.com/morkai/h5.linkformat/master/license.md).\r\n\r\n### Acknowledgements\r\n\r\nRegular expressions used in the parser are (with slight modifications) from the\r\n[mkovatsc/Copper](https://github.com/mkovatsc/Copper) project (specifically\r\n[`CopperChrome.parseLinkFormat()`](https://github.com/mkovatsc/Copper/blob/dc77bd2287/chrome/content/Helpers.js#L271))\r\nreleased under the New BSD License.\r\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/morkai/h5.linkformat.git"
  },
  "scripts": {
    "amd": "r.js -convert lib/ build/lib-amd/h5.linkformat/",
    "test": "grunt"
  },
  "version": "0.0.0"
}
